{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Svg, Path, G } from 'react-native-svg';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CircularProgress = function (_React$PureComponent) {\n  _inherits(CircularProgress, _React$PureComponent);\n\n  var _super = _createSuper(CircularProgress);\n\n  function CircularProgress() {\n    var _this;\n\n    _classCallCheck(this, CircularProgress);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.clampFill = function (fill) {\n      return Math.min(100, Math.max(0, fill));\n    };\n\n    return _this;\n  }\n\n  _createClass(CircularProgress, [{\n    key: \"polarToCartesian\",\n    value: function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n      var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n      return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n      };\n    }\n  }, {\n    key: \"circlePath\",\n    value: function circlePath(x, y, radius, startAngle, endAngle) {\n      var start = this.polarToCartesian(x, y, radius, endAngle * 0.9999);\n      var end = this.polarToCartesian(x, y, radius, startAngle);\n      var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n      var d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y];\n      return d.join(' ');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          size = _this$props.size,\n          width = _this$props.width,\n          backgroundWidth = _this$props.backgroundWidth,\n          tintColor = _this$props.tintColor,\n          tintTransparency = _this$props.tintTransparency,\n          backgroundColor = _this$props.backgroundColor,\n          style = _this$props.style,\n          rotation = _this$props.rotation,\n          lineCap = _this$props.lineCap,\n          _this$props$fillLineC = _this$props.fillLineCap,\n          fillLineCap = _this$props$fillLineC === void 0 ? lineCap : _this$props$fillLineC,\n          arcSweepAngle = _this$props.arcSweepAngle,\n          fill = _this$props.fill,\n          children = _this$props.children,\n          childrenContainerStyle = _this$props.childrenContainerStyle,\n          padding = _this$props.padding,\n          renderCap = _this$props.renderCap,\n          dashedBackground = _this$props.dashedBackground,\n          dashedTint = _this$props.dashedTint;\n      var maxWidthCircle = backgroundWidth ? Math.max(width, backgroundWidth) : width;\n      var sizeWithPadding = size / 2 + padding / 2;\n      var radius = size / 2 - maxWidthCircle / 2 - padding / 2;\n      var currentFillAngle = arcSweepAngle * this.clampFill(fill) / 100;\n      var backgroundPath = this.circlePath(sizeWithPadding, sizeWithPadding, radius, tintTransparency ? 0 : currentFillAngle, arcSweepAngle);\n      var circlePath = this.circlePath(sizeWithPadding, sizeWithPadding, radius, 0, currentFillAngle);\n      var coordinate = this.polarToCartesian(sizeWithPadding, sizeWithPadding, radius, currentFillAngle);\n      var cap = this.props.renderCap ? this.props.renderCap({\n        center: coordinate\n      }) : null;\n      var offset = size - maxWidthCircle * 2;\n\n      var localChildrenContainerStyle = _objectSpread(_objectSpread({}, {\n        position: 'absolute',\n        left: maxWidthCircle + padding / 2,\n        top: maxWidthCircle + padding / 2,\n        width: offset,\n        height: offset,\n        borderRadius: offset / 2,\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden'\n      }), childrenContainerStyle);\n\n      var strokeDasharrayTint = dashedTint.gap > 0 ? Object.values(dashedTint).map(function (value) {\n        return parseInt(value);\n      }) : null;\n      var strokeDasharrayBackground = dashedBackground.gap > 0 ? Object.values(dashedBackground).map(function (value) {\n        return parseInt(value);\n      }) : null;\n      return _jsxs(View, {\n        style: style,\n        children: [_jsx(Svg, {\n          width: size + padding,\n          height: size + padding,\n          children: _jsxs(G, {\n            rotation: rotation,\n            originX: (size + padding) / 2,\n            originY: (size + padding) / 2,\n            children: [backgroundColor && _jsx(Path, {\n              d: backgroundPath,\n              stroke: backgroundColor,\n              strokeWidth: backgroundWidth || width,\n              strokeLinecap: lineCap,\n              strokeDasharray: strokeDasharrayBackground,\n              fill: \"transparent\"\n            }), fill > 0 && _jsx(Path, {\n              d: circlePath,\n              stroke: tintColor,\n              strokeWidth: width,\n              strokeLinecap: fillLineCap,\n              strokeDasharray: strokeDasharrayTint,\n              fill: \"transparent\"\n            }), cap]\n          })\n        }), children && _jsx(View, {\n          style: localChildrenContainerStyle,\n          children: children(fill)\n        })]\n      });\n    }\n  }]);\n\n  return CircularProgress;\n}(React.PureComponent);\n\nexport { CircularProgress as default };\nCircularProgress.propTypes = {\n  style: PropTypes.object,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(Animated.Value)]).isRequired,\n  fill: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  backgroundWidth: PropTypes.number,\n  tintColor: PropTypes.string,\n  tintTransparency: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  rotation: PropTypes.number,\n  lineCap: PropTypes.string,\n  arcSweepAngle: PropTypes.number,\n  children: PropTypes.func,\n  childrenContainerStyle: PropTypes.object,\n  padding: PropTypes.number,\n  renderCap: PropTypes.func,\n  dashedBackground: PropTypes.object,\n  dashedTint: PropTypes.object\n};\nCircularProgress.defaultProps = {\n  tintColor: 'black',\n  tintTransparency: true,\n  rotation: 90,\n  lineCap: 'butt',\n  arcSweepAngle: 360,\n  padding: 0,\n  dashedBackground: {\n    width: 0,\n    gap: 0\n  },\n  dashedTint: {\n    width: 0,\n    gap: 0\n  }\n};","map":{"version":3,"sources":["C:/Users/ZAIIIN/OneDrive/Desktop/FYP_Project/node_modules/react-native-circular-progress/src/CircularProgress.js"],"names":["React","PropTypes","Svg","Path","G","CircularProgress","clampFill","fill","Math","min","max","centerX","centerY","radius","angleInDegrees","angleInRadians","PI","x","cos","y","sin","startAngle","endAngle","start","polarToCartesian","end","largeArcFlag","d","join","props","size","width","backgroundWidth","tintColor","tintTransparency","backgroundColor","style","rotation","lineCap","fillLineCap","arcSweepAngle","children","childrenContainerStyle","padding","renderCap","dashedBackground","dashedTint","maxWidthCircle","sizeWithPadding","currentFillAngle","backgroundPath","circlePath","coordinate","cap","center","offset","localChildrenContainerStyle","position","left","top","height","borderRadius","alignItems","justifyContent","overflow","strokeDasharrayTint","gap","Object","values","map","value","parseInt","strokeDasharrayBackground","PureComponent","propTypes","object","oneOfType","number","instanceOf","Animated","Value","isRequired","string","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, View } from 'react-native';\nimport { Svg, Path, G } from 'react-native-svg';\n\nexport default class CircularProgress extends React.PureComponent {\n  polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians),\n    };\n  }\n\n  circlePath(x, y, radius, startAngle, endAngle) {\n    var start = this.polarToCartesian(x, y, radius, endAngle * 0.9999);\n    var end = this.polarToCartesian(x, y, radius, startAngle);\n    var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    var d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y];\n    return d.join(' ');\n  }\n\n  clampFill = fill => Math.min(100, Math.max(0, fill));\n\n  render() {\n    const {\n      size,\n      width,\n      backgroundWidth,\n      tintColor,\n      tintTransparency,\n      backgroundColor,\n      style,\n      rotation,\n      lineCap,\n      fillLineCap = lineCap,\n      arcSweepAngle,\n      fill,\n      children,\n      childrenContainerStyle,\n      padding,\n      renderCap,\n      dashedBackground,\n      dashedTint\n    } = this.props;\n\n    const maxWidthCircle = backgroundWidth ? Math.max(width, backgroundWidth) : width;\n    const sizeWithPadding = size / 2 + padding / 2;\n    const radius = size / 2 - maxWidthCircle / 2 - padding / 2;\n\n    const currentFillAngle = (arcSweepAngle * this.clampFill(fill)) / 100;\n    const backgroundPath = this.circlePath(\n      sizeWithPadding,\n      sizeWithPadding,\n      radius,\n      tintTransparency ? 0 : currentFillAngle,\n      arcSweepAngle\n    );\n    const circlePath = this.circlePath(\n      sizeWithPadding,\n      sizeWithPadding,\n      radius,\n      0,\n      currentFillAngle\n    );\n    const coordinate = this.polarToCartesian(\n      sizeWithPadding,\n      sizeWithPadding,\n      radius,\n      currentFillAngle\n    );\n    const cap = this.props.renderCap ? this.props.renderCap({ center: coordinate }) : null;\n\n    const offset = size - maxWidthCircle * 2;\n\n    const localChildrenContainerStyle = {\n      ...{\n        position: 'absolute',\n        left: maxWidthCircle + padding / 2,\n        top: maxWidthCircle + padding / 2,\n        width: offset,\n        height: offset,\n        borderRadius: offset / 2,\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden',\n      },\n      ...childrenContainerStyle,\n    }\n\n    const strokeDasharrayTint = dashedTint.gap > 0 ?\n      Object.values(dashedTint)\n      .map(value => parseInt(value))\n      : null;\n\n    const strokeDasharrayBackground = dashedBackground.gap > 0 ?\n      Object.values(dashedBackground)\n      .map(value => parseInt(value))\n      : null;\n\n    return (\n      <View style={style}>\n        <Svg width={size + padding} height={size + padding}>\n          <G rotation={rotation} originX={(size + padding) / 2} originY={(size + padding) / 2}>\n            {backgroundColor && (\n              <Path\n                d={backgroundPath}\n                stroke={backgroundColor}\n                strokeWidth={backgroundWidth || width}\n                strokeLinecap={lineCap}\n                strokeDasharray={strokeDasharrayBackground}\n                fill=\"transparent\"\n              />\n            )}\n            {fill > 0 && (\n              <Path\n                d={circlePath}\n                stroke={tintColor}\n                strokeWidth={width}\n                strokeLinecap={fillLineCap}\n                strokeDasharray={strokeDasharrayTint}\n                fill=\"transparent\"\n              />\n            )}\n            {cap}\n          </G>\n        </Svg>\n        {children && <View style={localChildrenContainerStyle}>{children(fill)}</View>}\n      </View>\n    );\n  }\n}\n\nCircularProgress.propTypes = {\n  style: PropTypes.object,\n  size: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.instanceOf(Animated.Value),\n  ]).isRequired,\n  fill: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  backgroundWidth: PropTypes.number,\n  tintColor: PropTypes.string,\n  tintTransparency: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  rotation: PropTypes.number,\n  lineCap: PropTypes.string,\n  arcSweepAngle: PropTypes.number,\n  children: PropTypes.func,\n  childrenContainerStyle: PropTypes.object,\n  padding: PropTypes.number,\n  renderCap: PropTypes.func,\n  dashedBackground: PropTypes.object,\n  dashedTint: PropTypes.object\n};\n\nCircularProgress.defaultProps = {\n  tintColor: 'black',\n  tintTransparency: true,\n  rotation: 90,\n  lineCap: 'butt',\n  arcSweepAngle: 360,\n  padding: 0,\n  dashedBackground: { width: 0, gap: 0 },\n  dashedTint: { width: 0, gap: 0 },\n};\n"]},"metadata":{},"sourceType":"module"}